"""Nasa Open Api Views."""
from rest_framework import status
from rest_framework.request import Request
from rest_framework.response import Response
from rest_framework.serializers import ValidationError
from rest_framework.views import APIView

from nasa_api_service.dto import DateDto, IPSDto
from nasa_api_service.interplanetary_shock_service import InterplanetaryShockService
from nasa_api_service.nasa_data_service import NasaGetData
from nasa_api_service.serializers import ApodDTOSerializer, DateSerializer, IPSDTOSerializer


class AstronomyPictureNASAView(APIView):
    """
    API View for retrieving information about the Astronomy Picture of the Day (APOD) from NASA.

    Supports the GET HTTP method for retrieving information about the current Astronomy Picture of the Day.

    Example:
    - GET: /nasa/picture_of_the_day/

    Returns serialized ApodDTO on successful request.

    In case of an error, returns an appropriate HTTP status and an error message.

    Attributes:
    - NasaGetData: A service class for collecting data from the NASA Open API.
    - ApodDTOSerializer: Serializer class for converting ApodDTO to JSON.
    """

    def get(self, request: Request) -> Response:
        """
        Retrieve information about the current Astronomy Picture of the Day.

        :param request: Request object.
        :return: Serialized ApodDTO and HTTP status 200 on success.
        :rtype: Response
        """
        nasa_open_api = NasaGetData()
        try:
            apod_info = nasa_open_api.astronomy_picture_of_the_day_data()
        except Exception as exception:
            return Response({'error': str(exception)}, status=status.HTTP_400_BAD_REQUEST)
        apod_serializer = ApodDTOSerializer(apod_info)
        return Response(apod_serializer.data, status=status.HTTP_200_OK)


class InterplanetaryShockNASAView(APIView):
    """
    API View for retrieving information about the Interplanetary Shock (IPS) from NASA.

    Supports the POST HTTP method for retrieving information about the Interplanetary Shock  for a given date period .

    Example:
    - POST: /nasa/interplanetary_shock/
    Request Body:

          "start_date": "2022-01-01",
          "end_date": "2023-01-10"

    Returns serialized IPSDto on successful request.

    In case of an error, returns an appropriate HTTP status and an error message.

    Attributes:
    - nasa_open_api: A service class for collecting data from the NASA Open API.
    - saved_ips_data: List to store Interplanetary Shock data.
    """

    def __init__(self) -> None:
        """
        Constructors of InterplanetaryShockNASAView class.

        Initializes the class object and sets attributes:
            - nasa_open_api: An instance of NasaGetData class for accessing NASA Open API.
        """
        super().__init__()
        self.nasa_open_api = NasaGetData()

    saved_ips_data: list[IPSDto] = []

    def post(self, request: Request) -> Response:
        """
        Retrieve information about the Interplanetary Shock for a given date period.

        :param request: Request object.
        :return: Serialized IPSDto and HTTP status 200 on success.
        :rtype: Response
        """
        date_serializer = DateSerializer(data=request.data)
        if not date_serializer.is_valid():
            raise ValidationError
        date_dto = DateDto(
            start_date=date_serializer.validated_data.get('start_date'),
            end_date=date_serializer.validated_data.get('end_date'),
        )
        try:
            ips_info = self.nasa_open_api.interplanetary_shock_data(date_dto)
        except Exception as exception:
            return Response({'error': str(exception)}, status=status.HTTP_400_BAD_REQUEST)
        self.saved_ips_data.extend(ips_info)
        ips_serializer = IPSDTOSerializer(ips_info, many=True)
        return Response(ips_serializer.data, status=status.HTTP_200_OK)


class InterplanetaryShockNASADetailView(APIView):
    """
    API view for retrieving, updating, and deleting a specific Interplanetary Shock record.

    Supports the GET, PUT, DELETE HTTP method for retrieving, updating, deleting information about the Interplanetary
    Shock from the saved_ips_data list generated by the post method in class InterplanetaryShockNASAView.

    Methods:
        - GET: Retrieve an Interplanetary Shock record by its ID.
        - PUT: Update an Interplanetary Shock record by its ID.
        - DELETE: Delete an Interplanetary Shock record by its ID.
    Example:
        - GET: /nasa/interplanetary_shock/1/
        - PUT: /nasa/interplanetary_shock/1/
        - DELETE: /nasa/interplanetary_shock/1/

    Returns serialized IPSDTO on successful request.

    Attributes:
         - get_ips_by_id: Method for retrieving an Interplanetary Shock record by its ID.
         - update_ips_data: Method for updating an Interplanetary Shock record by its ID.
         - delete_ips_data: Method for deleting an Interplanetary Shock record by its ID.
         - saved_ips_data: List to store Interplanetary Shock data.
    """

    def __init__(self) -> None:
        """
        Constructors of InterplanetaryShockNASADetailView class .

        Initializes the class object and sets attributes:
            - get_ips_by_id: Method to retrieve Interplanetary Shock data by identifier.
            - update_ips_data: Method to update Interplanetary Shock  data by identifier.
            - delete_ips_data: Method to delete Interplanetary Shock  data by identifier.
        """
        super().__init__()
        self.get_ips_by_id = InterplanetaryShockService().get_ips_by_id
        self.update_ips_data = InterplanetaryShockService().update_ips_data
        self.delete_ips_data = InterplanetaryShockService().delete_ips_data

    saved_ips_data = InterplanetaryShockNASAView.saved_ips_data

    def get(self, request: Request, pk: int) -> Response:
        """
        Retrieve an Interplanetary Shock record by its ID.

        :param request: Request object.
        :param pk: ID of the Interplanetary Shock record to retrieve.
        :return: Serialized Interplanetary Shock record and HTTP status 200 on success.
        :rtype: Response
        """
        try:
            ips_by_id = self.get_ips_by_id(self.saved_ips_data, pk)
        except Exception as exception:
            return Response({'error': str(exception)}, status=status.HTTP_400_BAD_REQUEST)

        ips_serializer = IPSDTOSerializer(ips_by_id)

        return Response(ips_serializer.data, status=status.HTTP_200_OK)

    def put(self, request: Request, pk: int) -> Response:
        """
        Update an Interplanetary Shock record by its ID.

        :param request: Request object.
        :param pk: ID of the Interplanetary Shock record to update.
        :return: Serialized updated Interplanetary Shock record and HTTP status 200 on success.
        :rtype: Response
        """
        try:
            update_ips_data = self.update_ips_data(self.saved_ips_data, pk, update_ips_data=request.data)
        except Exception as exception:
            return Response({'error': str(exception)}, status=status.HTTP_400_BAD_REQUEST)

        ips_serializer = IPSDTOSerializer(update_ips_data, many=True)

        return Response(ips_serializer.data, status=status.HTTP_200_OK)

    def delete(self, request: Request, pk: int) -> Response:
        """
        Delete an Interplanetary Shock record by its ID.

        :param request: Request object.
        :param pk: ID of the Interplanetary Shock record to delete.
        :return: Serialized updated list of Interplanetary Shock records and HTTP status 200 on success.
        :rtype: Response
        """
        try:
            delete_ips_data = self.delete_ips_data(self.saved_ips_data, pk)
        except Exception as exception:
            return Response({'error': str(exception)}, status=status.HTTP_400_BAD_REQUEST)

        ips_serializer = IPSDTOSerializer(delete_ips_data, many=True)

        return Response(ips_serializer.data, status=status.HTTP_200_OK)
